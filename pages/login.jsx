import { getCsrfToken, signIn } from "next-auth/client";
import { useContext } from "react";
import { Formik, Form } from "formik";
import FormikControl from "../utils/FormikControl";
import Context from "../utils/Context";
import { useRouter } from "next/router";

export default function Login({ csrfToken }) {
  const { setError, setInfo } = useContext(Context);
  const router = useRouter();
  if (router.query?.error) {
    setError("Invalid credentials!");
  }
  return (
    <>
      <div id="login">
        <div class="card" id="login-card">
          <div id="login-logo">
            <svg
              width="100"
              height="100"
              viewBox="0 0 134 134"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <circle cx="67" cy="67" r="67" fill="#C4C4C4" />
              <path
                d="M29.877 71.0156H23.6465L21.5273 75H20.2285L27.9141 60.7812H29.0566L31.8008 75H30.6191L29.877 71.0156ZM24.1836 69.9902H29.6816L28.2754 62.2852L24.1836 69.9902ZM40.1309 65.4199C39.877 65.3678 39.6198 65.3385 39.3594 65.332C38.6172 65.332 37.9368 65.5599 37.3184 66.0156C36.6999 66.4648 36.2865 67.0378 36.0781 67.7344L34.8281 75H33.6758L35.5117 64.4336H36.6543L36.3027 66.1133C36.6868 65.4883 37.1491 65.013 37.6895 64.6875C38.2363 64.362 38.8353 64.2057 39.4863 64.2188C39.7142 64.2188 39.9811 64.2643 40.2871 64.3555L40.1309 65.4199ZM44.1934 74.2188C44.9616 74.2448 45.6387 74.0332 46.2246 73.584C46.8171 73.1283 47.2109 72.5163 47.4062 71.748H48.5098C48.3145 72.7962 47.8001 73.6426 46.9668 74.2871C46.14 74.9251 45.196 75.2311 44.1348 75.2051C43.2819 75.1855 42.5658 74.9512 41.9863 74.502C41.4069 74.0527 40.987 73.431 40.7266 72.6367C40.4727 71.8424 40.3913 70.9473 40.4824 69.9512L40.5215 69.5312C40.5996 68.8477 40.7656 68.1836 41.0195 67.5391C41.2799 66.8945 41.625 66.3249 42.0547 65.8301C42.4844 65.3288 42.9954 64.9349 43.5879 64.6484C44.1868 64.3555 44.8607 64.2188 45.6094 64.2383C46.6901 64.2643 47.5495 64.6289 48.1875 65.332C48.8255 66.0352 49.125 66.9271 49.0859 68.0078L47.9824 67.998C47.9954 67.1842 47.7839 66.5267 47.3477 66.0254C46.9115 65.5241 46.3158 65.2604 45.5605 65.2344C44.7533 65.2083 44.0404 65.4427 43.4219 65.9375C42.8034 66.4323 42.3379 67.1322 42.0254 68.0371C41.7129 68.9421 41.5664 69.9023 41.5859 70.918C41.6055 71.9661 41.8398 72.7734 42.2891 73.3398C42.7383 73.8997 43.373 74.1927 44.1934 74.2188ZM52.8066 66.2207C53.8223 64.873 55.0202 64.2122 56.4004 64.2383C57.416 64.2643 58.1549 64.6191 58.6172 65.3027C59.0794 65.9863 59.2422 66.9271 59.1055 68.125L57.9531 75H56.8008L57.9531 68.1055C57.9922 67.7344 57.9987 67.3763 57.9727 67.0312C57.862 65.8724 57.2305 65.2767 56.0781 65.2441C55.3945 65.2311 54.7565 65.4362 54.1641 65.8594C53.5716 66.276 53.0508 66.9076 52.6016 67.7539L51.3516 75H50.1992L52.8066 60H53.959L52.8066 66.2207ZM62.2402 75H61.0684L62.9141 64.4336H64.0762L62.2402 75ZM63.2363 61.377C63.2689 60.9538 63.5488 60.6868 64.0762 60.5762C64.3301 60.6217 64.5091 60.7031 64.6133 60.8203C64.724 60.931 64.7956 61.1165 64.8281 61.377C64.763 61.6243 64.6686 61.8066 64.5449 61.9238C64.4212 62.0345 64.2357 62.1159 63.9883 62.168C63.4609 62.0898 63.2103 61.8262 63.2363 61.377ZM71.8594 73.9844H78.6758L78.5 75H70.4824L72.9531 60.7812H74.1543L71.8594 73.9844ZM80.834 69.6191C80.9512 68.597 81.2637 67.6628 81.7715 66.8164C82.2793 65.9635 82.9108 65.3158 83.666 64.873C84.4277 64.4303 85.2513 64.2188 86.1367 64.2383C87.0091 64.2513 87.7513 64.4922 88.3633 64.9609C88.9818 65.4232 89.431 66.0579 89.7109 66.8652C89.9974 67.666 90.0951 68.5547 90.0039 69.5312L89.9844 69.7168C89.7891 71.3835 89.1966 72.7214 88.207 73.7305C87.224 74.7396 86.0423 75.2279 84.6621 75.1953C83.4772 75.1758 82.5299 74.7396 81.8203 73.8867C81.1107 73.0339 80.7624 71.9076 80.7754 70.5078L80.8047 69.9512L80.834 69.6191ZM81.9668 69.9512C81.8822 70.7259 81.9375 71.4421 82.1328 72.0996C82.3346 72.7507 82.6536 73.2617 83.0898 73.6328C83.526 74.0039 84.0697 74.1992 84.7207 74.2188C85.4238 74.2318 86.0651 74.0527 86.6445 73.6816C87.2305 73.3105 87.7122 72.7865 88.0898 72.1094C88.4674 71.4323 88.7116 70.6836 88.8223 69.8633L88.8516 69.541C88.9688 68.2845 88.7734 67.2591 88.2656 66.4648C87.7643 65.6641 87.0352 65.2539 86.0781 65.2344C85.0365 65.2018 84.1348 65.6055 83.373 66.4453C82.6178 67.2786 82.1556 68.3887 81.9863 69.7754L81.9668 69.9512ZM96.791 64.2285C97.4225 64.248 97.9987 64.3978 98.5195 64.6777C99.0404 64.9577 99.4505 65.3841 99.75 65.957L100.111 64.4336H101.195L99.418 74.8145C99.2943 75.6999 99.0143 76.4811 98.5781 77.1582C98.1419 77.8353 97.582 78.3529 96.8984 78.7109C96.2214 79.0755 95.4661 79.2448 94.6328 79.2188C93.9688 79.2057 93.334 79.0397 92.7285 78.7207C92.1165 78.3952 91.625 77.9427 91.2539 77.3633L91.9766 76.6797C92.6471 77.6888 93.5228 78.2064 94.6035 78.2324C95.5671 78.2585 96.3711 77.9655 97.0156 77.3535C97.6667 76.748 98.0768 75.9212 98.2461 74.873L98.5 73.6426C97.5625 74.7168 96.4329 75.2344 95.1113 75.1953C94.1217 75.1693 93.3503 74.7917 92.7969 74.0625C92.25 73.3268 91.9635 72.3275 91.9375 71.0645C91.8984 69.8991 92.0938 68.7467 92.5234 67.6074C92.9531 66.4681 93.5358 65.6152 94.2715 65.0488C95.0137 64.4759 95.8535 64.2025 96.791 64.2285ZM93.1582 69.8926L93.0996 70.8008C93.0801 71.8685 93.2656 72.6953 93.6562 73.2812C94.0469 73.8607 94.623 74.1634 95.3848 74.1895C96.0358 74.2155 96.6445 74.0625 97.2109 73.7305C97.7773 73.3984 98.2656 72.9069 98.6758 72.2559L99.5059 67.3242C99.3301 66.6927 99.0241 66.1947 98.5879 65.8301C98.1582 65.459 97.6048 65.2637 96.9277 65.2441C95.9316 65.2116 95.1048 65.5957 94.4473 66.3965C93.7962 67.1973 93.3665 68.3626 93.1582 69.8926ZM102.67 69.6191C102.787 68.597 103.1 67.6628 103.607 66.8164C104.115 65.9635 104.747 65.3158 105.502 64.873C106.264 64.4303 107.087 64.2188 107.973 64.2383C108.845 64.2513 109.587 64.4922 110.199 64.9609C110.818 65.4232 111.267 66.0579 111.547 66.8652C111.833 67.666 111.931 68.5547 111.84 69.5312L111.82 69.7168C111.625 71.3835 111.033 72.7214 110.043 73.7305C109.06 74.7396 107.878 75.2279 106.498 75.1953C105.313 75.1758 104.366 74.7396 103.656 73.8867C102.947 73.0339 102.598 71.9076 102.611 70.5078L102.641 69.9512L102.67 69.6191ZM103.803 69.9512C103.718 70.7259 103.773 71.4421 103.969 72.0996C104.171 72.7507 104.49 73.2617 104.926 73.6328C105.362 74.0039 105.906 74.1992 106.557 74.2188C107.26 74.2318 107.901 74.0527 108.48 73.6816C109.066 73.3105 109.548 72.7865 109.926 72.1094C110.303 71.4323 110.548 70.6836 110.658 69.8633L110.688 69.541C110.805 68.2845 110.609 67.2591 110.102 66.4648C109.6 65.6641 108.871 65.2539 107.914 65.2344C106.872 65.2018 105.971 65.6055 105.209 66.4453C104.454 67.2786 103.992 68.3887 103.822 69.7754L103.803 69.9512Z"
                fill="black"
              />
            </svg>
          </div>
          <h2>Welcome to Data Entry Section üôè</h2>
          <Formik
            initialValues={{ username: "", password: "", csrfToken: csrfToken }}
            onSubmit={(values) =>
              signIn("credentials", {
                username: values.username,
                password: values.password,
                callbackUrl: "/",
                events: {
                  async error(message) {
                    setError("Invalid Credentials!");
                  },
                },
              })
            }
          >
            {(formik) => (
              <Form method="post">
                <input name="csrfToken" type="hidden" />
                <FormikControl name="username" label="Username" />
                <FormikControl
                  name="password"
                  label="Password"
                  type="password"
                />
                <button id="login-btn" type="submit">
                  Sign in
                </button>
              </Form>
            )}
          </Formik>
        </div>
      </div>
    </>
  );
}
export async function getServerSideProps(context) {
  return {
    props: {
      csrfToken: await getCsrfToken(context),
    },
  };
}
